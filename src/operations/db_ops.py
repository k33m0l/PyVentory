import psycopg2
import os

from psycopg2 import sql
from objects.item import Item

def connect_to_db():
    try:
        conn = psycopg2.connect(
            database=os.environ["DB_NAME"],
            host="database",
            user=os.environ["DB_USER"],
            password=os.environ["DB_PASS"],
            port="5432"
        )
        conn.autocommit = True
        return conn
    except psycopg2.Error as err:
        print("Error connecting to database: " + str(err))
        raise

def create_table(table_name):
    try:
        conn = connect_to_db()
        cursor = conn.cursor()
        query = psycopg2.sql.SQL("""
            CREATE TABLE IF NOT EXISTS {} (
            item_id integer PRIMARY KEY GENERATED by default as identity,
            name varchar(255) NOT NULL,
            count integer NOT NULL);
        """).format(
            psycopg2.sql.Identifier(table_name)
        )
        cursor.execute(query)
        conn.close()
    except psycopg2.Error as err:
        print("Failed to create database: " + str(err))
        raise

def delete_table(table_name):
    try:
        conn = connect_to_db()
        cursor = conn.cursor()
        query = psycopg2.sql.SQL("DROP TABLE IF EXISTS {};").format(
            psycopg2.sql.Identifier(table_name)
        )
        cursor.execute(query)
        conn.close()
    except psycopg2.Error as err:
        print("Failed to create database: " + str(err))
        raise

def read_all_tables():
    try:
        conn = connect_to_db()
        cursor = conn.cursor()
        cursor.execute("SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';")
        response = cursor.fetchall()
        conn.close()
        return response
    except psycopg2.Error as err:
        print("Failed to read from inventory: " + str(err))
        raise

def read_all_items(table_name):
    try:
        conn = connect_to_db()
        cursor = conn.cursor()
        query = psycopg2.sql.SQL("SELECT * FROM {};").format(
            psycopg2.sql.Identifier(table_name)
        )
        cursor.execute(query)
        response = cursor.fetchall()
        conn.close()
        return response
    except psycopg2.Error as err:
        print("Failed to read from inventory: " + str(err))
        raise

def read_item_by_id(table_name, item_id):
    try:
        conn = connect_to_db()
        cursor = conn.cursor()
        query = psycopg2.sql.SQL("SELECT * FROM {table} WHERE item_id = %s;").format(
            table=psycopg2.sql.Identifier(table_name),
        )
        cursor.execute(query, [item_id])
        response = cursor.fetchone()
        conn.close()
        return response
    except psycopg2.Error as err:
        print("Failed to read from inventory: " + str(err))
        raise

def delete_item_by_id(table_name, item_id):
    try:
        conn = connect_to_db()
        cursor = conn.cursor()
        query = psycopg2.sql.SQL("DELETE FROM {table} WHERE item_id = %s;").format(
            table=psycopg2.sql.Identifier(table_name),
        )
        cursor.execute(query, [item_id])
        conn.close()
    except psycopg2.Error as err:
        print("Failed to read from inventory: " + str(err))
        raise

def update_item_by_id(table_name, item_id, **kwargs):
    validated_arguments = {key: value for key, value in kwargs.items() if value is not None}
    update_variables = psycopg2.sql.SQL(", ").join(
        psycopg2.sql.Composed([
            psycopg2.sql.Identifier(argument),
            psycopg2.sql.SQL(" = "),
            psycopg2.sql.Placeholder(),
        ]) for argument in validated_arguments 
    )
    try:
        conn = connect_to_db()
        cursor = conn.cursor()
        query = psycopg2.sql.SQL("UPDATE {table} SET {update_variables} WHERE item_id = %s;").format(
            table=psycopg2.sql.Identifier(table_name),
            update_variables=update_variables
        )

        query_params = list(validated_arguments.values()) + [item_id]
        cursor.execute(query, query_params)
        conn.close()
    except psycopg2.Error as err:
        print("Failed to read from inventory: " + str(err))
        raise

def add_item(table_name, item: Item):
    try:
        conn = connect_to_db()
        cursor = conn.cursor()
        query = psycopg2.sql.SQL("INSERT INTO {table} (name, count) VALUES(%s, %s);").format(
            table=psycopg2.sql.Identifier(table_name),
        )
        cursor.execute(query, (item.name, item.amount))
        conn.close()
    except psycopg2.Error as err:
        print("Failed to write into inventory: " + str(err))
        raise
